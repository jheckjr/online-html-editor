#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
var cs = require('../controllers/server-change-set');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Create socket.io server
 */
var io = require('socket.io')(server);

function Client(id) {
  this.id = id;
  this.revNum = 0;
}

function RevisionRecord(changeSet, sourceId, revNum) {
  this.changeSet = cs.convertToChangeSet(JSON.parse(JSON.stringify(changeSet)));
  this.sourceId = sourceId;
  this.revNum = revNum;
}

let clients = {};
// Most recent string representation of document
let headText;
// Document revisions
let revisions = [];

function initDocument() {
  headText = new cs.ChangeSet(0);

  revisions.push(new RevisionRecord(headText, 0, 0));
}

initDocument();

function updateHeadText(revNum, clientCS) {
  // If client revision is head revision, return clientCS
  if (revNum === revisions.length - 1) {
    return clientCS;
  }

  let newCS = cs.convertToChangeSet(clientCS);
  // for each rev from client revNum to head, perform followCS(revision, newCS)
  for (let idx = revNum + 1; idx < revisions.length; idx++) {
    newCS = cs.followCS(revisions[idx].changeSet, newCS);
  }

  return newCS;
}

// socket.io connection
io.on('connection', function(socket) {

  // Client disconnection
  socket.on('disconnect', function() {
    console.log('User disconnected. Id: ' + socket.id);

    // Remove client if disconnected
    if (clients[socket.id]) {
      delete clients[socket.id];
    }
  });

  socket.on('clientUpdate', function(msg) {
    let data = JSON.parse(msg).data;
    console.log('Received update from client: ' + socket.id);

    // Update headText with new changeset
    headText = updateHeadText(clients[socket.id].revNum, data);

    // Broadcast update to all other clients
    let msgObj = {
      data: headText
    };
    socket.broadcast.emit('serverUpdate', JSON.stringify(msgObj));
    // Send acknowledgement back to sending client
    socket.emit('serverAck');

    // TODO: Update all client revNums?
    let newRevNum = revisions.length;
    // Store updated headText
    revisions.push(new RevisionRecord(headText, socket.id, newRevNum));
    clients[socket.id].revNum = newRevNum;
  });

  // New client connection
  socket.on('newClientId', function(id) {
    console.log('New user connection. Id: ' + id);
    // Add client to list of clients
    clients[id] = new Client(id);
    clients[id].revNum = revisions.length - 1;

    socket.emit('serverHeadText', JSON.stringify(headText));
  });

  socket.on('requestUpdate', function() {
    console.log('Update requested');
    let latestCS = {
      startLen:8,
      endLen:5,
      ops:[{
        op:"=",
        len:1
      },{
        op:"+",
        len:1
      },{
        op:"-",
        len:5
      },{
        op:"=",
        len:1
      },{
        op:"+",
        len:2
      },{
        op:"-",
        len:1
      }],
      changeText:"eow"
    };

    // Update headText with new changeset
    headText = updateHeadText(0, latestCS);
    console.log('HeadText updated. ', headText);

    // Broadcast update to all other clients
    let msg = {
      data: headText
    };
    socket.emit('serverUpdate', JSON.stringify(msg));
    console.log('Update sent');

    // Store updated headText
    revisions.push(new RevisionRecord(headText, 0, revisions.length));
  });
});
