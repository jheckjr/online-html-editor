#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Create socket.io server
 */
var io = require('socket.io')(server);

// socket.io connection
io.on('connection', function(socket) {
  console.log('a user connected');
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });

  socket.on('clientUpdate', function(msg) {
    let msgObj = JSON.parse(msg);

    console.log('Client id: ' + msgObj.id);
    console.log(msgObj.data);

    io.emit('serverAck');
  });

  socket.on('newClientId', function(id) {
    console.log('Id: ' + id);
    /*let headtext = {
      startLen: 0,
      endLen: 11,
      ops: [{
        op: '+',
        len: 11
      }],
      changeText: 'hello world'
    };*/
    let headtext = {
      startLen: 0,
      endLen: 8,
      ops: [{
        op: '+',
        len: 8
      }],
      changeText: 'baseball'
    };
    io.emit('headtext', JSON.stringify(headtext));
  });

  socket.on('requestUpdate', function() {
    /*let latestCS = {
      startLen: 11,
      endLen: 25,
      ops: [{
        op: '=',
        len: 11
      }, {
        op: '+',
        len: 14
      }],
      changeText: '\nI\'m a server.'
    };*/
    let latestCS = {
      startLen:8,
      endLen:5,
      ops:[{
        op:"=",
        len:1
      },{
        op:"+",
        len:1
      },{
        op:"-",
        len:5
      },{
        op:"=",
        len:1
      },{
        op:"+",
        len:2
      },{
        op:"-",
        len:1
      }],
      changeText:"eow"
    };
    let msg = {
      data: latestCS
    };
    io.emit('serverUpdate', JSON.stringify(msg));
  });

  //socket.broadcast.emit()
});
